[init]
	defaultBranch = main
[user]
	name = iamaamir
	email = aamirkhan180@gmail.com

[alias]
	# Sharable diff with disabled diff-so-fancy and +/- marks
	patch = !git --no-pager diff --no-color
	# Compact and readable log
	l = log --graph --pretty=format:'%C(magenta)%h%C(blue)%d%Creset %s %C(blue bold)- %an, %ar%Creset'
	# Log with list of changed files for each commit
	ll = log --stat --abbrev-commit
	# List of my own commits
	mine = !git log --branches=* --no-merges --pretty=format:'%C(reset)%C(bold)%cd %C(reset)%C(white)%s  %C(reset)%h' --date=short --author=\"$(git config user.name)\"
	# List of branches ordered by last change
	branches = for-each-ref --sort=-committerdate refs/heads/ --format='%(color:bold)%(refname:short)%(color:reset)\t%(committerdate:relative)'
	# List of files with merge conflicts
	wtf = diff --name-only --diff-filter=U
	# Cancel local commits in the branch: git fuck master
	fuck = "!f() { git reset --hard origin/$1; }; f"
    
    # on mac gitk does not comes with git
    # use brew install git git-gui
	ui = !git-gui
    visual = !gitk
    # undo last commit
    undo=reset --soft HEAD^
    # check the uncommited changes
    changes=diff --name-status -r
	# To see what new commits have been created by the last command (typically after a "git pull") : 
	changed = !sh -c 'git log $1@{1}..$1@{0} "$@"'
	# commit and push changes to the current branch
	send = "!f() { git commit -am \"$@\" && git push; }; f"
	# remove a branch from local and remote with force
	drop = "!f() { git branch -D \"$1\" && git push origin --delete \"$1\"; }; f"
[push]
	# When pushing code, always push only your current branch to a branch of the same name
	default = current

[fetch]
	# Automatically prune deleted branches from your local copy when you fetch (or pull)
	prune = true

[log]
	# Show branch names with git log
	decorate = short

[color]
    ui = auto

[color "diff"]
    meta = blue
    frag = white
    old = red bold
    new = green bold